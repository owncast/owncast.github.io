"use strict";(self.webpackChunkowncast_docusaurus=self.webpackChunkowncast_docusaurus||[]).push([[3447],{28453:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>i});var s=o(96540);const n={},r=s.createContext(n);function c(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(r.Provider,{value:t},e.children)}},89697:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"sslproxies/haproxy","title":"HAProxy","description":"HAproxy is a well known performant reverse proxy.","source":"@site/docs/sslproxies/haproxy.md","sourceDirName":"sslproxies","slug":"/sslproxies/haproxy","permalink":"/docs/sslproxies/haproxy","draft":false,"unlisted":false,"editUrl":"https://github.com/owncast/owncast.github.io/edit/main/docs/sslproxies/haproxy.md","tags":[],"version":"current","sidebarPosition":80,"frontMatter":{"title":"HAProxy","description":"HAproxy is a well known performant reverse proxy.","sidebar_position":80},"sidebar":"docs","previous":{"title":"lighttpd","permalink":"/docs/sslproxies/lighttpd"},"next":{"title":"APIs & Access Tokens","permalink":"/docs/api/apis"}}');var n=o(74848),r=o(28453);const c={title:"HAProxy",description:"HAproxy is a well known performant reverse proxy.",sidebar_position:80},i=void 0,a={},p=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Setup websocket on HAproxy could be tricky. Here is a working configuration:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"haproxy.cfg"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"global\n  log /dev/log  local0\n\tchroot /var/lib/haproxy\n\tuser haproxy\n\tgroup haproxy\n\tdaemon\n\n\t# Default SSL material locations\n\tca-base /etc/ssl/certs\n\tcrt-base /etc/ssl/private\n\n\t# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate\n  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n  ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n  nbproc  4\n  maxconn 16384\n\ndefaults\n    \tlog global\n        mode http\n    \toption httplog\n        timeout tunnel  1h\n        timeout client  5s\n        timeout server  60s\n        timeout connect 5s\n        timeout queue 5s\n\nfrontend tls\n  bind :443 accept-proxy ssl crt /etc/haproxy/certs ssl-min-ver TLSv1.2 \n\n  acl is_owncast hdr(host) -i <your.owncast.hostname.tld>\n  acl is_websocket hdr(Upgrade) -i WebSocket\n\n  use_backend owncast if is_owncast !is_websocket\n  # use a specific backend for websockets\n  use_backend owncastws if is_owncast is_websocket\n\nbackend owncast\n  mode http\n  http-request set-header X-Forwarded-Port %[dst_port]\n  http-request add-header X-Forwarded-Proto https if { ssl_fc }\n  option forwardfor\n  server server1 <owncast_ip_or_hostname>:<owncast_port> check\n\nbackend owncastws\n  mode http\n  http-request set-header X-Forwarded-Port %[dst_port]\n  http-request add-header X-Forwarded-Proto https if { ssl_fc }\n  option forwardfor\n  # added for websockets\n  option http-server-close\n  option forceclose\n  no option httpclose\n  server server1 <owncast_ip_or_hostname>:<owncast_port> check\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);