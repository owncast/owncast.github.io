"use strict";(self.webpackChunkowncast_web=self.webpackChunkowncast_web||[]).push([[8805],{"./components/stores/ClientConfigStore.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{ao:()=>ChatState,Xp:()=>ClientConfigStore,Dr:()=>accessTokenAtom,uy:()=>appStateAtom,td:()=>chatAuthenticatedAtom,in:()=>chatMessagesAtom,t2:()=>chatStateAtom,Ar:()=>clientConfigStateAtom,uL:()=>clockSkewAtom,gN:()=>currentUserAtom,DI:()=>fatalErrorStateAtom,F5:()=>isChatAvailableSelector,A4:()=>isMobileAtom,tp:()=>isOnlineSelector,Fb:()=>isVideoPlayingAtom,Bm:()=>serverStatusState,Qy:()=>visibleChatMessagesSelector,W5:()=>websocketServiceAtom});var react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),es=__webpack_require__("./node_modules/recoil/es/index.js"),useMachine=__webpack_require__("./node_modules/@xstate/react/es/useMachine.js"),client_config_model=__webpack_require__("./interfaces/client-config.model.ts"),client_config_service=__webpack_require__("./services/client-config-service.ts"),chat_service=__webpack_require__("./services/chat-service.ts"),socket_events=__webpack_require__("./interfaces/socket-events.ts"),console=__webpack_require__("./node_modules/console-browserify/index.js");class WebsocketService{createAndConnect(){if(!this.host)return;if(this.isShutdown)return;const url=new URL(this.host);url.protocol="https:"===window.location.protocol?"wss:":"ws:",url.pathname="/ws",url.port="3000"===window.location.port?"8080":window.location.port,url.searchParams.append("accessToken",this.accessToken);const ws=new WebSocket(url.toString());ws.onopen=this.onOpen.bind(this),ws.onclose=this.onClose.bind(this),ws.onmessage=this.onMessage.bind(this),this.websocket=ws}onOpen(){this.websocketReconnectTimer&&clearTimeout(this.websocketReconnectTimer),this.socketConnected(),this.backOff=0}onClose(){this.isShutdown||(!function handleNetworkingError(){console.error("Chat has been disconnected and is likely not working for you. It's possible you were removed from chat. If this is a server configuration issue, visit troubleshooting steps to resolve. https://owncast.online/docs/troubleshooting/#chat-is-disabled")}(),this.socketDisconnected(),this.scheduleReconnect())}scheduleReconnect(){this.isShutdown||(this.websocketReconnectTimer&&clearTimeout(this.websocketReconnectTimer),this.websocketReconnectTimer=setTimeout(this.createAndConnect,Math.min(this.backOff,1e4)),this.backOff+=1e3)}shutdown(){this.isShutdown=!0,this.websocket.close()}onMessage(e){const messages=e.data.split("\n");let socketEvent;for(let i=0;i<messages.length;i++){try{socketEvent=JSON.parse(messages[i]),this.handleMessage&&this.handleMessage(socketEvent)}catch(err){return void console.error(err,err.data)}if(!socketEvent.type)return void console.error("No type provided",socketEvent);if(socketEvent.type===socket_events.G.PING)return void this.sendPong()}}isConnected(){var _this_websocket,_this_websocket1;return(null===(_this_websocket=this.websocket)||void 0===_this_websocket?void 0:_this_websocket.readyState)===(null===(_this_websocket1=this.websocket)||void 0===_this_websocket1?void 0:_this_websocket1.OPEN)}send(socketEvent){socketEvent.type&&socket_events.G[socketEvent.type]||console.warn(`Outbound message: Unknown socket message type: "${socketEvent.type}" sent.`);const messageJSON=JSON.stringify(socketEvent);this.websocket.send(messageJSON)}sendPong(){const pong={type:socket_events.G.PONG};this.send(pong)}constructor(accessToken,path,host){this.isShutdown=!1,this.backOff=0,this.accessToken=accessToken,this.path=path,this.websocketReconnectTimer=null,this.isShutdown=!1,this.host=host,this.createAndConnect=this.createAndConnect.bind(this),this.shutdown=this.shutdown.bind(this),this.createAndConnect()}}var server_status_model=__webpack_require__("./interfaces/server-status.model.ts"),Machine=__webpack_require__("./node_modules/xstate/es/Machine.js");const ONLINE_STATE={chatAvailable:!0,chatLoading:!1,videoAvailable:!0,appLoading:!1};var AppStateEvent;!function(AppStateEvent){AppStateEvent.Loading="LOADING",AppStateEvent.Loaded="LOADED",AppStateEvent.Online="ONLINE",AppStateEvent.Offline="OFFLINE",AppStateEvent.NeedsRegister="NEEDS_REGISTER",AppStateEvent.Fail="FAIL",AppStateEvent.ChatUserDisabled="CHAT_USER_DISABLED"}(AppStateEvent||(AppStateEvent={}));const application_state=(0,Machine.O)({id:"appState",initial:"loading",predictableActionArguments:!0,states:{loading:{meta:{chatAvailable:!1,chatLoading:!1,videoAvailable:!1,appLoading:!0},on:{NEEDS_REGISTER:{target:"loading"},LOADED:{target:"ready"},FAIL:{target:"serverFailure"}}},ready:{initial:"offline",states:{online:{meta:{...ONLINE_STATE},on:{OFFLINE:{target:"goodbye"},CHAT_USER_DISABLED:{target:"chatUserDisabled"}}},offline:{meta:{chatAvailable:!1,chatLoading:!1,videoAvailable:!1,appLoading:!1},on:{ONLINE:{target:"online"}}},goodbye:{on:{ONLINE:{target:"online"}},meta:{chatAvailable:!0,chatLoading:!1,videoAvailable:!1,appLoading:!1},after:{3e5:{target:"offline"}}},chatUserDisabled:{meta:{...ONLINE_STATE,chatAvailable:!1}}}},serverFailure:{type:"final"},userfailure:{type:"final"}}});var localStorage=__webpack_require__("./utils/localStorage.ts"),helpers=__webpack_require__("./utils/helpers.js");var status_service=__webpack_require__("./services/status-service.ts");var ClientConfigStore_console=__webpack_require__("./node_modules/console-browserify/index.js");es.Or.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED=!1;let serverStatusRefreshPoll,hasBeenModeratorNotified=!1,hasWebsocketDisconnected=!1;const serverConnectivityError="Cannot connect to the Owncast service. Please check your internet connection and verify this Owncast server is running.",serverStatusState=(0,es.eU)({key:"serverStatusState",default:(0,server_status_model.x)()}),clientConfigStateAtom=(0,es.eU)({key:"clientConfigState",default:(0,client_config_model.n)()}),accessTokenAtom=(0,es.eU)({key:"accessTokenAtom",default:null}),currentUserAtom=(0,es.eU)({key:"currentUserAtom",default:null}),chatMessagesAtom=(0,es.eU)({key:"chatMessages",default:[]}),chatAuthenticatedAtom=(0,es.eU)({key:"chatAuthenticatedAtom",default:!1}),websocketServiceAtom=(0,es.eU)({key:"websocketServiceAtom",default:null,dangerouslyAllowMutability:!0}),appStateAtom=(0,es.eU)({key:"appState",default:{chatAvailable:!1,chatLoading:!0,videoAvailable:!1,appLoading:!0}}),isMobileAtom=(0,es.eU)({key:"isMobileAtom",default:void 0}),isVideoPlayingAtom=(0,es.eU)({key:"isVideoPlayingAtom",default:!1}),fatalErrorStateAtom=(0,es.eU)({key:"fatalErrorStateAtom",default:null}),clockSkewAtom=(0,es.eU)({key:"clockSkewAtom",default:0}),removedMessageIdsAtom=(0,es.eU)({key:"removedMessageIds",default:[]}),isChatAvailableSelector=(0,es.gD)({key:"isChatAvailableSelector",get:({get})=>{const state=get(appStateAtom);return get(accessTokenAtom)&&state.chatAvailable&&!hasWebsocketDisconnected}});var ChatState;!function(ChatState){ChatState[ChatState.VISIBLE=0]="VISIBLE",ChatState[ChatState.HIDDEN=1]="HIDDEN",ChatState[ChatState.POPPED_OUT=2]="POPPED_OUT",ChatState[ChatState.EMBEDDED=3]="EMBEDDED"}(ChatState||(ChatState={}));const chatStateAtom=(0,es.eU)({key:"chatState",default:(()=>{var _window_location;const window1=globalThis;return"/embed/chat/readwrite/"===(null==window1||null===(_window_location=window1.location)||void 0===_window_location?void 0:_window_location.pathname)?3:0})()}),isOnlineSelector=(0,es.gD)({key:"isOnlineSelector",get:({get})=>{const state=get(appStateAtom),isVideoPlaying=get(isVideoPlayingAtom);return state.videoAvailable||isVideoPlaying}}),visibleChatMessagesSelector=(0,es.gD)({key:"visibleChatMessagesSelector",get:({get})=>{const messages=get(chatMessagesAtom),removedIds=get(removedMessageIdsAtom);return messages.filter((message=>!removedIds.includes(message.id)))}}),ClientConfigStore=()=>{const ClientConfigService=(0,react.useContext)(client_config_service.O),ChatService=(0,react.useContext)(chat_service.F),ServerStatusService=(0,react.useContext)(status_service.O),[appState,appStateSend,appStateService]=(0,useMachine.z)(application_state),[currentUser,setCurrentUser]=(0,es.L4)(currentUserAtom),setChatAuthenticated=(0,es.lZ)(chatAuthenticatedAtom),[clientConfig,setClientConfig]=(0,es.L4)(clientConfigStateAtom),setServerStatus=(0,es.lZ)(serverStatusState),setClockSkew=(0,es.lZ)(clockSkewAtom),setChatMessages=(0,es.lZ)(chatMessagesAtom),[accessToken,setAccessToken]=(0,es.L4)(accessTokenAtom),setAppState=(0,es.lZ)(appStateAtom),setGlobalFatalErrorMessage=(0,es.lZ)(fatalErrorStateAtom),setWebsocketService=(0,es.lZ)(websocketServiceAtom),setHiddenMessageIds=(0,es.lZ)(removedMessageIdsAtom),[hasLoadedConfig,setHasLoadedConfig]=(0,react.useState)(!1);let ws;const setGlobalFatalError=(title,message)=>{setGlobalFatalErrorMessage({title,message})},sendEvent=events=>{appStateSend(events)},handleStatusChange=status=>{if(appState.matches("loading")){const events=[AppStateEvent.Loaded];return status.online?events.push(AppStateEvent.Online):events.push(AppStateEvent.Offline),void sendEvent(events)}status.online&&appState.matches("ready")?sendEvent([AppStateEvent.Online]):status.online||appState.matches("ready.offline")||sendEvent([AppStateEvent.Offline])},updateServerStatus=async()=>{try{const status=await ServerStatusService.getStatus();handleStatusChange(status),setServerStatus(status);const{serverTime}=status,clockSkew=new Date(serverTime).getTime()-Date.now();setClockSkew(clockSkew),setGlobalFatalErrorMessage(null)}catch(error){sendEvent([AppStateEvent.Fail]),setGlobalFatalError("Unable to reach Owncast server",serverConnectivityError),ClientConfigStore_console.error("serverStatusState -> getStatus() ERROR: \n",error)}},handleUserRegistration=async optionalDisplayName=>{const savedAccessToken=(0,localStorage.Lg)("accessToken");if(savedAccessToken)setAccessToken(savedAccessToken);else try{sendEvent([AppStateEvent.NeedsRegister]);const response=await ChatService.registerUser(optionalDisplayName),{accessToken:newAccessToken,displayName:newDisplayName,displayColor}=response;if(!newAccessToken)return;setCurrentUser({...currentUser,displayName:newDisplayName,displayColor}),setAccessToken(newAccessToken),(0,localStorage.ZB)("accessToken",newAccessToken)}catch(e){sendEvent([AppStateEvent.Fail]),ClientConfigStore_console.error(`ChatService -> registerUser() ERROR: \n${e}`)}},handleSocketDisconnect=()=>{hasWebsocketDisconnected=!0},handleSocketConnected=()=>{hasWebsocketDisconnected=!1},handleMessage=message=>{switch(message.type){case socket_events.G.ERROR_NEEDS_REGISTRATION:(0,localStorage.ZB)("accessToken",""),setAccessToken(null),null==ws||ws.shutdown(),handleUserRegistration();break;case socket_events.G.CONNECTED_USER_INFO:if(function handleConnectedClientInfoMessage(message,setChatAuthenticated,setCurrentUser){const{user}=message,{id,displayName,displayColor,scopes,authenticated}=user;setChatAuthenticated(authenticated),setCurrentUser({id:id.toString(),displayName,displayColor,isModerator:null==scopes?void 0:scopes.includes("MODERATOR")})}(message,setChatAuthenticated,setCurrentUser),message){var _m_user;const m=new socket_events.b(message);!hasBeenModeratorNotified&&(null===(_m_user=m.user)||void 0===_m_user?void 0:_m_user.isModerator)&&(setChatMessages((currentState=>[...currentState,message])),hasBeenModeratorNotified=!0)}break;case socket_events.G.CHAT:setChatMessages((currentState=>[...currentState,message]));break;case socket_events.G.NAME_CHANGE:!function handleNameChangeEvent(message,setChatMessages,setCurrentUser){setCurrentUser((currentUser=>currentUser.id===message.user.id?{...currentUser,displayName:message.user.displayName}:currentUser)),setChatMessages((currentState=>[...currentState,message]))}(message,setChatMessages,setCurrentUser);break;case socket_events.G.USER_JOINED:case socket_events.G.USER_PARTED:case socket_events.G.SYSTEM:case socket_events.G.CHAT_ACTION:case socket_events.G.FEDIVERSE_ENGAGEMENT_FOLLOW:case socket_events.G.FEDIVERSE_ENGAGEMENT_LIKE:case socket_events.G.FEDIVERSE_ENGAGEMENT_REPOST:setChatMessages((currentState=>[...currentState,message]));break;case socket_events.G.VISIBILITY_UPDATE:(message=>{const{ids,visible}=message;setHiddenMessageIds(visible?currentState=>currentState.filter((id=>!ids.includes(id))):currentState=>[...currentState,...ids])})(message);break;case socket_events.G.ERROR_USER_DISABLED:ClientConfigStore_console.log("User has been disabled"),sendEvent([AppStateEvent.ChatUserDisabled]);break;default:ClientConfigStore_console.error("Unknown socket message type: ",message.type)}};return(0,react.useEffect)((()=>{try{if(window.configHydration){const config=JSON.parse(window.configHydration);setClientConfig(config),setHasLoadedConfig(!0)}}catch(e){ClientConfigStore_console.error("Error parsing config hydration",e)}try{if(window.statusHydration){const status=JSON.parse(window.statusHydration);setServerStatus(status),handleStatusChange(status)}}catch(e){ClientConfigStore_console.error("error parsing status hydration",e)}try{window.configHydration&&window.statusHydration&&sendEvent([AppStateEvent.Loaded])}catch(e){ClientConfigStore_console.error("error sending loaded event",e)}}),[]),(0,react.useEffect)((()=>{clientConfig.chatDisabled||accessToken&&hasLoadedConfig&&(ws||(async()=>{try{ws&&(null==ws||ws.shutdown(),setWebsocketService(null),ws=null);const{socketHostOverride}=clientConfig,location=window.location.origin+window.location.pathname;ws=new WebsocketService(accessToken,"/ws",socketHostOverride||location),ws.handleMessage=handleMessage,ws.socketDisconnected=handleSocketDisconnect,ws.socketConnected=handleSocketConnected,setWebsocketService(ws)}catch(error){ClientConfigStore_console.error(`ChatService -> startChat() ERROR: \n${error}`),sendEvent([AppStateEvent.ChatUserDisabled])}})())}),[hasLoadedConfig,accessToken]),(0,react.useEffect)((()=>(window.configHydration||(async()=>{try{const config=await ClientConfigService.getConfig();setClientConfig(config),setGlobalFatalErrorMessage(null),setHasLoadedConfig(!0)}catch(error){setGlobalFatalError("Unable to reach Owncast server",serverConnectivityError),ClientConfigStore_console.error("ClientConfigService -> getConfig() ERROR: \n",error)}})(),handleUserRegistration(),window.statusHydration||updateServerStatus(),clearInterval(serverStatusRefreshPoll),serverStatusRefreshPoll=setInterval((()=>{updateServerStatus()}),5e3),()=>{clearInterval(serverStatusRefreshPoll)})),[]),(0,react.useEffect)((()=>{accessToken&&(async()=>{try{const messages=await ChatService.getChatHistory(accessToken);messages&&setChatMessages((currentState=>[...currentState,...messages]))}catch(error){ClientConfigStore_console.error(`ChatService -> getChatHistory() ERROR: \n${error}`)}})()}),[accessToken]),(0,react.useEffect)((()=>{appStateService.onTransition((state=>{const metadata=(0,helpers.Cl)(state.meta);setAppState(metadata)}))}),[]),null};try{ClientConfigStore.displayName="ClientConfigStore",ClientConfigStore.__docgenInfo={description:"",displayName:"ClientConfigStore",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/stores/ClientConfigStore.tsx#ClientConfigStore"]={docgenInfo:ClientConfigStore.__docgenInfo,name:"ClientConfigStore",path:"components/stores/ClientConfigStore.tsx#ClientConfigStore"})}catch(__react_docgen_typescript_loader_error){}},"./interfaces/client-config.model.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function makeEmptyClientConfig(){return{name:"",summary:"",offlineMessage:"",logo:"",tags:[],nsfw:!1,extraPageContent:"",socialHandles:[],chatDisabled:!1,externalActions:[],customStyles:"",appearanceVariables:new Map,maxSocketPayloadSize:0,federation:{enabled:!1,account:"",followerCount:0},notifications:{browser:{enabled:!1,publicKey:""}},authentication:{indieAuthEnabled:!1}}}__webpack_require__.d(__webpack_exports__,{n:()=>makeEmptyClientConfig})},"./interfaces/server-status.model.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function makeEmptyServerStatus(){return{online:!1,viewerCount:0,serverTime:new Date}}__webpack_require__.d(__webpack_exports__,{x:()=>makeEmptyServerStatus})},"./interfaces/socket-events.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{G:()=>MessageType,b:()=>ChatEvent});var MessageType,_user_model__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./interfaces/user.model.ts");!function(MessageType){MessageType.CHAT="CHAT",MessageType.PING="PING",MessageType.NAME_CHANGE="NAME_CHANGE",MessageType.COLOR_CHANGE="COLOR_CHANGE",MessageType.PONG="PONG",MessageType.SYSTEM="SYSTEM",MessageType.USER_JOINED="USER_JOINED",MessageType.USER_PARTED="USER_PARTED",MessageType.CHAT_ACTION="CHAT_ACTION",MessageType.FEDIVERSE_ENGAGEMENT_FOLLOW="FEDIVERSE_ENGAGEMENT_FOLLOW",MessageType.FEDIVERSE_ENGAGEMENT_LIKE="FEDIVERSE_ENGAGEMENT_LIKE",MessageType.FEDIVERSE_ENGAGEMENT_REPOST="FEDIVERSE_ENGAGEMENT_REPOST",MessageType.CONNECTED_USER_INFO="CONNECTED_USER_INFO",MessageType.ERROR_USER_DISABLED="ERROR_USER_DISABLED",MessageType.ERROR_NEEDS_REGISTRATION="ERROR_NEEDS_REGISTRATION",MessageType.ERROR_MAX_CONNECTIONS_EXCEEDED="ERROR_MAX_CONNECTIONS_EXCEEDED",MessageType.VISIBILITY_UPDATE="VISIBILITY-UPDATE"}(MessageType||(MessageType={}));class ChatEvent{constructor(message){this.id=message.id,this.timestamp=message.timestamp,this.type=message.type,this.body=message.body,message.user&&(this.user=new _user_model__WEBPACK_IMPORTED_MODULE_0__.K(message.user))}}},"./interfaces/user.model.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K:()=>User});class User{constructor(u){this.id=u.id,this.displayName=u.displayName,this.displayColor=u.displayColor,this.createdAt=u.createdAt,this.previousNames=u.previousNames,this.nameChangedAt=u.nameChangedAt,this.scopes=u.scopes,this.authenticated=u.authenticated,this.isBot=u.isBot,this.scopes&&this.scopes.length>0&&(this.isModerator=this.scopes.includes("MODERATOR"))}}},"./utils/helpers.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Cl:()=>mergeMeta,X4:()=>isMobileSafariHomeScreenApp,ei:()=>isMobileSafariIos,kt:()=>getDiffInDaysFromNow});var ua_parser_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/ua-parser-js/src/ua-parser.js"),ua_parser_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_0__);function getDiffInDaysFromNow(timestamp){const time="string"==typeof timestamp?new Date(timestamp):timestamp;return(new Date-time)/864e5}function mergeMeta(meta){return Object.keys(meta).reduce(((acc,key)=>{const value=meta[key];return Object.assign(acc,value),acc}),{})}const isMobileSafariIos=()=>{try{const ua=navigator.userAgent,uaParser=new(ua_parser_js__WEBPACK_IMPORTED_MODULE_0___default())(ua),browser=uaParser.getBrowser(),device=uaParser.getDevice();return"Apple"===device.vendor&&(("mobile"===device.type||"tablet"===device.type)&&("Mobile Safari"===browser.name||"Safari"===browser.name))}catch(e){return!1}},isMobileSafariHomeScreenApp=()=>!!isMobileSafariIos()&&("standalone"in window.navigator&&window.navigator.standalone)},"./services/chat-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>ChatServiceContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_utils_apis__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./utils/apis.ts"),console=__webpack_require__("./node_modules/console-browserify/index.js");const ChatServiceContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(class ChatService{static async getChatHistory(accessToken){try{return await(0,_utils_apis__WEBPACK_IMPORTED_MODULE_1__.DW)(`/api/chat?accessToken=${accessToken}`)}catch(e){return console.error(e),[]}}static async registerUser(username){const options={method:"POST",headers:{"Content-Type":"application/json"},data:{displayName:username}};return await(0,_utils_apis__WEBPACK_IMPORTED_MODULE_1__.DW)("/api/chat/register",options)}})},"./services/client-config-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>ClientConfigServiceContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const ClientConfigServiceContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(class ClientConfigService{static async getConfig(){const response=await fetch("/api/config");return await response.json()}})},"./services/status-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>ServerStatusServiceContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const ServerStatusServiceContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(class ServerStatusService{static async getStatus(){const response=await fetch("/api/status");return await response.json()}})},"./utils/apis.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D0:()=>FEDERATION_MESSAGE_SEND,DW:()=>getUnauthedData,Fd:()=>fetchData,Fq:()=>SERVER_CONFIG,XQ:()=>STATUS,e0:()=>upgradeVersionAvailable,nn:()=>SERVER_CONFIG_UPDATE_URL,r1:()=>FETCH_INTERVAL});var process=__webpack_require__("./node_modules/process/browser.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const semverGt=__webpack_require__("./node_modules/semver/functions/gt.js"),ADMIN_USERNAME=process.env.NEXT_PUBLIC_ADMIN_USERNAME,ADMIN_STREAMKEY=process.env.NEXT_PUBLIC_ADMIN_STREAMKEY,API_LOCATION="/api/admin/",FETCH_INTERVAL=15e3,STATUS=`${API_LOCATION}status`,SERVER_CONFIG=`${API_LOCATION}serverconfig`,SERVER_CONFIG_UPDATE_URL=`${API_LOCATION}config`,FEDERATION_MESSAGE_SEND=`${API_LOCATION}federation/send`,GITHUB_RELEASE_URL="https://api.github.com/repos/owncast/owncast/releases/latest";async function fetchData(url,options){const{data,method="GET",auth=!0}=options||{},requestOptions={method};if(data&&(requestOptions.body=JSON.stringify(data)),auth&&ADMIN_USERNAME&&ADMIN_STREAMKEY){const encoded=btoa(`${ADMIN_USERNAME}:${ADMIN_STREAMKEY}`);requestOptions.headers={Authorization:`Basic ${encoded}`},requestOptions.mode="cors",requestOptions.credentials="include"}const response=await fetch(url,requestOptions),json=await response.json();if(!response.ok){const message=json.message||`An error has occurred: ${response.status}`;throw new Error(message)}return json}async function getUnauthedData(url,options){return fetchData(url,{method:"GET",auth:!1,...options})}async function getGithubRelease(){return async function fetchExternalData(url){try{const response=await fetch(url,{referrerPolicy:"no-referrer",referrer:""});if(!response.ok){const message=`An error has occured: ${response.status}`;throw new Error(message)}return await response.json()}catch(error){console.log(error)}return{}}(GITHUB_RELEASE_URL)}async function upgradeVersionAvailable(currentVersion){let recentReleaseVersion=(await getGithubRelease()).tag_name;return"v"===recentReleaseVersion.substr(0,1)&&(recentReleaseVersion=recentReleaseVersion.substr(1)),function upToDate(local,remote){return!semverGt(remote,local)}(currentVersion,recentReleaseVersion)?null:recentReleaseVersion}},"./utils/localStorage.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Lg:()=>getLocalStorage,ZB:()=>setLocalStorage,rS:()=>LOCAL_STORAGE_KEYS});var console=__webpack_require__("./node_modules/console-browserify/index.js");const LOCAL_STORAGE_KEYS={username:"username",hasDisplayedNotificationModal:"HAS_DISPLAYED_NOTIFICATION_MODAL",userVisitCount:"USER_VISIT_COUNT"};function getLocalStorage(key){try{return localStorage.getItem(key)}catch(e){console.error(e)}return null}function setLocalStorage(key,value){try{return""!==value&&null!==value?localStorage.setItem(key,value):localStorage.removeItem(key),!0}catch(e){console.error(e)}return!1}}}]);