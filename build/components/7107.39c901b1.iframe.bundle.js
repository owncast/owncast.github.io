"use strict";(self.webpackChunkowncast_web=self.webpackChunkowncast_web||[]).push([[7107],{"./node_modules/date-fns/differenceInCalendarDays.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>differenceInCalendarDays});var getTimezoneOffsetInMilliseconds=__webpack_require__("./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js"),normalizeDates=__webpack_require__("./node_modules/date-fns/_lib/normalizeDates.js"),constants=__webpack_require__("./node_modules/date-fns/constants.js"),toDate=__webpack_require__("./node_modules/date-fns/toDate.js");function startOfDay(date,options){const _date=(0,toDate.a)(date,options?.in);return _date.setHours(0,0,0,0),_date}function differenceInCalendarDays(laterDate,earlierDate,options){const[laterDate_,earlierDate_]=(0,normalizeDates.x)(options?.in,laterDate,earlierDate),laterStartOfDay=startOfDay(laterDate_),earlierStartOfDay=startOfDay(earlierDate_),laterTimestamp=+laterStartOfDay-(0,getTimezoneOffsetInMilliseconds.G)(laterStartOfDay),earlierTimestamp=+earlierStartOfDay-(0,getTimezoneOffsetInMilliseconds.G)(earlierStartOfDay);return Math.round((laterTimestamp-earlierTimestamp)/constants.w4)}},"./node_modules/date-fns/formatDuration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>formatDuration});var _lib_defaultLocale_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/date-fns/locale/en-US.js"),_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/date-fns/_lib/defaultOptions.js");const defaultFormat=["years","months","weeks","days","hours","minutes","seconds"];function formatDuration(duration,options){const defaultOptions=(0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__.q)(),locale=options?.locale??defaultOptions.locale??_lib_defaultLocale_js__WEBPACK_IMPORTED_MODULE_1__.c,format=options?.format??defaultFormat,zero=options?.zero??!1,delimiter=options?.delimiter??" ";if(!locale.formatDistance)return"";return format.reduce(((acc,unit)=>{const token=`x${unit.replace(/(^.)/,(m=>m.toUpperCase()))}`,value=duration[unit];return void 0!==value&&(zero||duration[unit])?acc.concat(locale.formatDistance(token,value)):acc}),[]).join(delimiter)}},"./node_modules/date-fns/intervalToDuration.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>intervalToDuration});var normalizeDates=__webpack_require__("./node_modules/date-fns/_lib/normalizeDates.js");var constructFrom=__webpack_require__("./node_modules/date-fns/constructFrom.js"),toDate=__webpack_require__("./node_modules/date-fns/toDate.js");function addDays(date,amount,options){const _date=(0,toDate.a)(date,options?.in);return isNaN(amount)?(0,constructFrom.w)(options?.in||date,NaN):amount?(_date.setDate(_date.getDate()+amount),_date):_date}function addMonths(date,amount,options){const _date=(0,toDate.a)(date,options?.in);if(isNaN(amount))return(0,constructFrom.w)(options?.in||date,NaN);if(!amount)return _date;const dayOfMonth=_date.getDate(),endOfDesiredMonth=(0,constructFrom.w)(options?.in||date,_date.getTime());endOfDesiredMonth.setMonth(_date.getMonth()+amount+1,0);return dayOfMonth>=endOfDesiredMonth.getDate()?endOfDesiredMonth:(_date.setFullYear(endOfDesiredMonth.getFullYear(),endOfDesiredMonth.getMonth(),dayOfMonth),_date)}function add(date,duration,options){const{years=0,months=0,weeks=0,days=0,hours=0,minutes=0,seconds=0}=duration,_date=(0,toDate.a)(date,options?.in),dateWithMonths=months||years?addMonths(_date,months+12*years):_date,dateWithDays=days||weeks?addDays(dateWithMonths,days+7*weeks):dateWithMonths,msToAdd=1e3*(seconds+60*(minutes+60*hours));return(0,constructFrom.w)(options?.in||date,+dateWithDays+msToAdd)}var differenceInCalendarDays=__webpack_require__("./node_modules/date-fns/differenceInCalendarDays.js");function differenceInDays(laterDate,earlierDate,options){const[laterDate_,earlierDate_]=(0,normalizeDates.x)(options?.in,laterDate,earlierDate),sign=compareLocalAsc(laterDate_,earlierDate_),difference=Math.abs((0,differenceInCalendarDays.m)(laterDate_,earlierDate_));laterDate_.setDate(laterDate_.getDate()-sign*difference);const result=sign*(difference-Number(compareLocalAsc(laterDate_,earlierDate_)===-sign));return 0===result?0:result}function compareLocalAsc(laterDate,earlierDate){const diff=laterDate.getFullYear()-earlierDate.getFullYear()||laterDate.getMonth()-earlierDate.getMonth()||laterDate.getDate()-earlierDate.getDate()||laterDate.getHours()-earlierDate.getHours()||laterDate.getMinutes()-earlierDate.getMinutes()||laterDate.getSeconds()-earlierDate.getSeconds()||laterDate.getMilliseconds()-earlierDate.getMilliseconds();return diff<0?-1:diff>0?1:diff}var getRoundingMethod=__webpack_require__("./node_modules/date-fns/_lib/getRoundingMethod.js"),constants=__webpack_require__("./node_modules/date-fns/constants.js");function differenceInHours(laterDate,earlierDate,options){const[laterDate_,earlierDate_]=(0,normalizeDates.x)(options?.in,laterDate,earlierDate),diff=(+laterDate_-+earlierDate_)/constants.s0;return(0,getRoundingMethod.u)(options?.roundingMethod)(diff)}var differenceInMilliseconds=__webpack_require__("./node_modules/date-fns/differenceInMilliseconds.js");function differenceInMinutes(dateLeft,dateRight,options){const diff=(0,differenceInMilliseconds.b)(dateLeft,dateRight)/constants.Cg;return(0,getRoundingMethod.u)(options?.roundingMethod)(diff)}var differenceInMonths=__webpack_require__("./node_modules/date-fns/differenceInMonths.js"),differenceInSeconds=__webpack_require__("./node_modules/date-fns/differenceInSeconds.js"),compareAsc=__webpack_require__("./node_modules/date-fns/compareAsc.js");function differenceInCalendarYears(laterDate,earlierDate,options){const[laterDate_,earlierDate_]=(0,normalizeDates.x)(options?.in,laterDate,earlierDate);return laterDate_.getFullYear()-earlierDate_.getFullYear()}function differenceInYears(laterDate,earlierDate,options){const[laterDate_,earlierDate_]=(0,normalizeDates.x)(options?.in,laterDate,earlierDate),sign=(0,compareAsc.z)(laterDate_,earlierDate_),diff=Math.abs(differenceInCalendarYears(laterDate_,earlierDate_));laterDate_.setFullYear(1584),earlierDate_.setFullYear(1584);const result=sign*(diff-+((0,compareAsc.z)(laterDate_,earlierDate_)===-sign));return 0===result?0:result}function intervalToDuration(interval,options){const{start,end}=function normalizeInterval(context,interval){const[start,end]=(0,normalizeDates.x)(context,interval.start,interval.end);return{start,end}}(options?.in,interval),duration={},years=differenceInYears(end,start);years&&(duration.years=years);const remainingMonths=add(start,{years:duration.years}),months=(0,differenceInMonths.W)(end,remainingMonths);months&&(duration.months=months);const remainingDays=add(remainingMonths,{months:duration.months}),days=differenceInDays(end,remainingDays);days&&(duration.days=days);const remainingHours=add(remainingDays,{days:duration.days}),hours=differenceInHours(end,remainingHours);hours&&(duration.hours=hours);const remainingMinutes=add(remainingHours,{hours:duration.hours}),minutes=differenceInMinutes(end,remainingMinutes);minutes&&(duration.minutes=minutes);const remainingSeconds=add(remainingMinutes,{minutes:duration.minutes}),seconds=(0,differenceInSeconds.O)(end,remainingSeconds);return seconds&&(duration.seconds=seconds),duration}}}]);